ungroup () %>%
mutate(popbbydays = avgpop * days)
avg_pop_df = tot_pop_by_day %>%
group_by(year) %>%
summarise(popbydays_total = sum(na.omit(popbbydays)),
days_in_year = sum(na.omit(days))) %>%
ungroup() %>%
mutate(days_in_year_correct = days_in_year + 1) %>%
mutate(average_pop = popbydays_total / days_in_year_correct) %>%
select(year, average_pop)
avg_pop_df %>%
output_table()
agedist1 = left_join(agedist, avg_pop_df, by = "year") %>%
mutate(group_pop = percent * average_pop)
agedist1 %>%
output_table()
agegroups = agedist1 %>%
distinct(age_group) %>%
separate(age_group, c("min_age", "max_age"), "–", remove = FALSE) %>% mutate(min_age = as.numeric(min_age), max_age = as.numeric(max_age))
deathmaster_bop = deathmaster_bop %>%
rowwise() %>%
mutate(age_group = case_when(
api_age >= 0 & api_age <=19 ~ "0–19",
api_age >= 20 & api_age <=24 ~ "20–24",
api_age >= 25 & api_age <=29 ~ "25–29",
api_age >= 30 & api_age <=34 ~ "30–34",
api_age >= 35 & api_age <=39 ~ "35–39",
api_age >= 40 & api_age <=44 ~ "40–44",
api_age >= 45 & api_age <=49 ~ "45–49",
api_age >= 50 & api_age <=54 ~ "50–54",
api_age >= 55 & api_age <=59 ~ "55–59",
api_age >= 60 & api_age <=64 ~ "60–64",
api_age >= 65 & api_age <=69 ~ "65–69",
api_age >= 70 & api_age <=74 ~ "70–74",
api_age >= 75 & api_age <=79 ~ "75–79",
api_age >= 80 & api_age <=84 ~ "80–84",
api_age >= 85 & api_age <=89~ "85–89",
# since BOP's age frequency distribution did not include people aged 95 and above, we assume that they are counted in the highest age category possible
api_age >= 90 ~ "90–94",
TRUE ~ "not-found"))
deathmaster_bop %>%
filter(api_age > 95)  %>%
output_table()
death_year_age = deathmaster_bop %>%
group_by(year, age_group) %>%
summarise(deaths = n())
agedist2 = left_join(agedist1, death_year_age, by = c("age_group", "year"))
agedist2[is.na(agedist2)] <- 0
# calculate death rate for each age group
agedist2 = agedist2 %>%
mutate(mortality_per_100k = (deaths / group_pop)*100000,
mortality_rate = deaths/group_pop)
agedist2 %>%
output_table()
df = agedist2 %>%
pivot_wider(id_cols = age_group, names_from = year, values_from = mortality_per_100k)
df %>%
output_table()
ref = agedist2 %>%
filter(year <2020)
std = ref %>%
group_by(age_group) %>%
summarise(deaths_sum = sum(deaths),
group_pop_sum = sum(group_pop)) %>%
ungroup() %>%
mutate(expected_death_rate = deaths_sum / group_pop_sum)
yr20 = agedist2 %>%
filter(year == 2020) %>%
select(age_group, group_pop, deaths, mortality_rate)
std1 = left_join(std, yr20, by = "age_group")
std1 = std1 %>%
mutate(expected_deaths = group_pop * expected_death_rate)
sum(na.omit(std1$deaths))/sum(na.omit(std1$expected_deaths))-1
yr21 = agedist2 %>%
filter(year == 2021) %>%
select(age_group, group_pop, deaths, mortality_rate)
std2 = left_join(std, yr21, by = "age_group")
std2 = std2 %>%
mutate(expected_deaths = group_pop * expected_death_rate)
sum(na.omit(std2$deaths))/sum(na.omit(std2$expected_deaths))-1
# examining age distribution of all years
years = c(2015:2021)
for(year in years){
plot = agedist2 %>%
filter(year == year) %>%
ggplot(aes(x = age_group, percent, fill= age_group))+
geom_bar(stat = "identity")+
ggtitle(paste0(year))
print(plot)
}
# calculating the age-specific death rates in the refernce population - 2015-2019
std = ref %>%
group_by(age_group) %>%
summarise(group_pop = sum(group_pop), average_pop = sum(average_pop), deaths = sum(deaths))
std = std %>%
mutate(death_rate = deaths / group_pop,
pop_pct = group_pop / average_pop,
weighted_rate = death_rate * pop_pct)
std %>%
output_table()
sum(std$weighted_weight)*100000
yr20_3 =  left_join(yr20, std, by = "age_group") %>%
mutate(weighted_rate = mortality_rate * pop_pct)
yr20_3 %>%
output_table()
sum(yr20_3$weighted_rate)*100000
# difference between 2020 and 2015-2019
sum(yr20_3$weighted_rate)/sum(yr20_3$weighted_rate)-1
(sum(yr20_3$weighted_rate)/sum(yr20_3$weighted_rate))-1
(sum(yr20_3$weighted_rate)/sum(std$weighted_rate) -1
sum(yr20_3$weighted_rate)/sum(std$weighted_rate) -1
sum(yr20_3$weighted_rate)/sum(std$weighted_rate)-1
yr21 = yr21 %>%
mutate(mortality_rate = deaths / group_pop)
yr21_3 = left_join(yr21, std, by = "age_group")
yr21_3  = yr21_3 %>%
mutate(weighted_rate = mortality_rate * pop_pct)
yr21 = yr21 %>%
mutate(mortality_rate = deaths / group_pop)
yr21_3 = left_join(yr21, std, by = "age_group")
yr21_3  = yr21_3 %>%
mutate(weighted_rate = mortality_rate * pop_pct)
yr21_3 %>% output_table()
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, error = FALSE)
library(tidyverse)
library(readxl)
library(lubridate)
library(jsonlite)
library(purrr)
library(janitor)
library(kableExtra)
library(knitr)
options(scipen = 100)
# Function for formatted table output
output_table = function(table){
table %>%
kable() %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"),font_size = 14, fixed_thead = T) %>%
scroll_box(width = "100%",height =  "500px")
}
# death data obtained through two FOIA requests
death01 = read_csv('Jan2009-May2021 Deaths Analyzed - Copy.csv') %>%
slice(c(1:4507))
death02 = read_csv('20211217_2019_2021_deaths.csv')
# death data shared by Alison Guernsey at University of Iowa
death03 = read_csv('20220208_BOP_deaths_Apr_21_Jan_22.csv')
# Clean Data
death01 = death01 %>%
mutate(api_actRelDate = lubridate::mdy(api_actRelDate),
DOD = lubridate::mdy(DOD))
death02 = death02 %>%
mutate(api_actRelDate = lubridate::mdy(api_actRelDate),
DOD = lubridate::ymd(DOD))
death03 = death03 %>%
rename('InstID' = 'faclCode',
'RegisterNum' = 'BOP_RegisterNum',
'DOD' = 'actRelDate',
'api_age' = 'age',
'api_sex' = 'sex',
'api_race' = 'race') %>%
mutate(DOD = lubridate::mdy(DOD))
#stitching the three death databases together
deathmasterraw = bind_rows(death01, death02, death03)
# cleaning up the columns as well as dropping duplicates - some of the requests have overlapping timeframes.
deathmaster = deathmasterraw %>%
select('InstID','RegisterNum','DOD','api_age','api_sex','api_race') %>%
distinct() %>%
mutate(year = year(DOD))
deathmaster %>%
group_by(year) %>%
count() %>%
output_table()
path <- "./ucla_files"
files <- dir(path, pattern = "*.json")
fullfilesnames = list.files(path, pattern = "*json", full.names = TRUE)
myJSON <- lapply(fullfilesnames, function(x) fromJSON(x)) # a list in which each element is one of the original JSON files
#
df_all_json = tibble() # create a nested data frame that combines all of the data frame
for (i in 1:length(myJSON)){
df = myJSON[[i]]%>%
enframe %>%
pivot_wider(names_from = name, values_from = value)
df_all_json = bind_rows(df_all_json, df)
}
# clean the data frame
df_all_json = df_all_json %>%
mutate(DATEMODIFIED = mdy(DATEMODIFIED)) %>%
mutate(year = year(DATEMODIFIED))
#extract population totals
mainframe = df_all_json %>%
select(TOTALPOPULATION, BOPTOTAL, PRIVATETOTAL, DATEMODIFIED, year) %>%
rename(total_population = TOTALPOPULATION, bop_population = BOPTOTAL, private_population = PRIVATETOTAL, date = DATEMODIFIED ) %>%
mutate(population = as.numeric(bop_population))
# extract the institution codes
bopfacmaster = tibble()
for (i in 1:nrow(df_all_json)){
df = df_all_json[[9]][[i]] # isolate the nested data frame
year = df_all_json[[17]][[i]]
date_modified = df_all_json[[8]][[i]]
df = df %>%
mutate(year = year, DATEMODIFIED = date_modified)
bopfacmaster = bind_rows(bopfacmaster, df)
}
bopfacmaster = bopfacmaster %>%
distinct()
glimpse(bopfacmaster)
instcnt = bopfacmaster %>%
distinct(year, code) %>%
group_by(year, code) %>%
count() %>%
ungroup() %>%
group_by(year) %>%
count()
# a facility is missing in 2022. But we aren't including them in the analysis.
instcnt %>%
output_table()
bopcodes = unique(bopfacmaster$code)
length(bopcodes) # it looks like it's the same 122 facilities throughout the years.
# using the BOP codes to filter out deaths in these facilities
deathmaster_bop = deathmaster %>%
filter(InstID %in% bopcodes)
# check if any BOP facility hasn't had any deaths
bopcodes[!(bopcodes %in% unique(deathmaster_bop$InstID))]
agedist = read_excel('tabula-Age_BOP_FY2015-21_cleaned.xlsx')
agedist = agedist %>%
group_by(year) %>%
mutate(frequency_overall = sum(Frequency)) %>%
ungroup() %>%
# calculate population percentage from raw numbers.
mutate( percent = Frequency / frequency_overall) %>%
# deselect the original percent column that was rounded
select(-Percent) %>%
clean_names() %>%
rename(age_group = age) %>%
mutate(age_group = str_replace_all(age_group, ' ','')) %>%
mutate(age_group = str_replace_all(age_group, '-','–')) %>%
mutate(age_group = str_replace_all(age_group, '<=19','0–19'))
agedist %>%
output_table()
# calculate population totals from the BOP data set
reportcnt = agedist %>%
group_by(year) %>%
summarise(population = sum(frequency)) %>%
ungroup() %>%
rowwise() %>%
mutate(date_text = paste0('09/30/', toString(year))) %>%
mutate(date = mdy(date_text))
# adding the BOP data to the UCLA data
popdf = full_join(mainframe, reportcnt) %>%
distinct()
popdf %>%
output_table()
# check to see if the two datasets form a smooth curve.
ggplot()+
geom_line(data = mainframe, aes(x = date, y = population))+
geom_point(data = reportcnt, aes(x = date, y = population))
interpolate_population = function(df, year_choice, mode){
df_current = df %>%
filter(year == year_choice) %>%
arrange(date)
if (mode == "dec"){
df_edge= df %>%
filter(year == year_choice+1) %>%
arrange(date) %>%
slice_head()
df_current_edge = bind_rows(df_current, df_edge) %>%
arrange(date) %>%
slice(n() - 1,n()) %>%
arrange(date) %>%
mutate(x = c(0:1))
first_day_next_year_date = df_current_edge %>%
slice(2) %>%
pull(date)
last_day_this_year_date = df_current_edge %>%
slice(1) %>%
pull(date)
# dec_31_this_year
edge_date_this_year = paste0( year_choice, "-12-31")
# calculate delta of days between first date of next year and last date of this year
delta1 = as.numeric(difftime(ymd(first_day_next_year_date),
ymd(last_day_this_year_date),
units = "days"))
# calculate delta of days between Dec 31 of this year and last date of this year
delta2 = as.numeric(difftime(ymd(edge_date_this_year),
ymd(last_day_this_year_date),
units = "days"))
edge_position = delta2/delta1
}
if (mode == "jan"){
df_edge= df %>%
filter(year == year_choice - 1) %>%
arrange(date) %>%
slice_tail()
df_current_edge = bind_rows(df_current, df_edge) %>%
arrange(date) %>%
slice(1,2) %>%
arrange(date) %>%
mutate(x = c(0:1))
# calculate delta of days between first date of this year and last date of last year
first_day_this_year_date = df_current_edge %>%
slice(2) %>%
pull(date)
last_day_last_year_date = df_current_edge %>%
slice(1) %>%
pull(date)
# jan_1_this_year
edge_date_this_year = paste0(year_choice, "-01-01")
# calculate delta of days between first date of this year and last date of last year
delta1 = as.numeric(difftime(ymd(first_day_this_year_date),
ymd(last_day_last_year_date),
units = "days"))
#calculate delta of days between Jan 1 of this year and last date of last year
delta2 =as.numeric(difftime(ymd(edge_date_this_year),
ymd(last_day_last_year_date),
units = "days"))
edge_position = delta2/delta1
}
af <- approxfun(df_current_edge$x, df_current_edge$population)
edge_pop = af(edge_position)
df_edge_result = tibble(date = ymd(edge_date_this_year),
population = edge_pop)
return(df_edge_result)
}
# compute the interpolated or extrapolated values for Jan 1 and Dec. 31 of each year
years  = c(2015:2021)
df_bookends = tibble()
for (year_choice in years){
# Interpolate for Dec 31 -----------------------
check_dec_date = popdf %>%
filter(year == year_choice) %>%
arrange(date) %>%
slice(n()) %>%
pull(date)
if (check_dec_date != paste0(year_choice, "-12-31")){
dec_bookend = interpolate_population(popdf, year_choice, "dec")
df_bookends = bind_rows(df_bookends, dec_bookend)
}
}
## Interpolate for Jan 1. However, for 2015 since we don't have data for 2014 we will need to extrapolate
for (year_choice in years){
check_jan_date = popdf %>%
filter(year == year_choice) %>%
arrange(date) %>%
slice(1) %>%
pull(date)
# extrapolate for 2015
if (year_choice == 2015) {
last_day_this_year_date = popdf %>%
filter(year == 2015) %>%
arrange(date) %>%
slice_tail() %>%
pull(date)
last_day_this_year_pop = popdf %>%
filter(year == 2015) %>%
arrange(date) %>%
slice_tail() %>%
pull(population)
first_day_this_year_date = "2015-01-01"
# calculate delta of days between first date of this year and beginning of this year
delta1 = as.numeric(difftime(ymd(last_day_this_year_date),
ymd(first_day_this_year_date),
units = "days"))
pos1 = delta1/365
dec31val = interpolate_population(popdf, 2015, "dec") %>%
pull(population)
jan_extrapolate_date = tibble(
x= c(pos1, 1),
population = c(last_day_this_year_pop, dec31val)
)
our_model = lm(population ~ x, data = jan_extrapolate_date)
jan1val = predict(our_model, newdata = data.frame(x = 0))
jan_bookend = tibble( date = ymd(first_day_this_year_date),
population = jan1val )
df_bookends = bind_rows(df_bookends, jan_bookend)
}
# interpolate for the rest
else{
if (check_dec_date != paste0(year_choice, "-01-01")){
jan_bookend = interpolate_population(popdf, year_choice, "jan")
df_bookends = bind_rows(df_bookends, jan_bookend)
}
}
}
df_bookends = df_bookends %>%
mutate(year = year(date))
# add the computed bookends to the population counts
popdf1 = bind_rows(popdf, df_bookends)
tot_pop_by_day = popdf1 %>%
arrange(date) %>%
group_by(year) %>%
mutate(avgpop = (population + lead(population)) / 2,
days = as.numeric(difftime(ymd(lead(date)),
ymd(date),
units = "days")) ) %>%
ungroup () %>%
mutate(popbbydays = avgpop * days)
avg_pop_df = tot_pop_by_day %>%
group_by(year) %>%
summarise(popbydays_total = sum(na.omit(popbbydays)),
days_in_year = sum(na.omit(days))) %>%
ungroup() %>%
mutate(days_in_year_correct = days_in_year + 1) %>%
mutate(average_pop = popbydays_total / days_in_year_correct) %>%
select(year, average_pop)
avg_pop_df %>%
output_table()
agedist1 = left_join(agedist, avg_pop_df, by = "year") %>%
mutate(group_pop = percent * average_pop)
agedist1 %>%
output_table()
agegroups = agedist1 %>%
distinct(age_group) %>%
separate(age_group, c("min_age", "max_age"), "–", remove = FALSE) %>% mutate(min_age = as.numeric(min_age), max_age = as.numeric(max_age))
deathmaster_bop = deathmaster_bop %>%
rowwise() %>%
mutate(age_group = case_when(
api_age >= 0 & api_age <=19 ~ "0–19",
api_age >= 20 & api_age <=24 ~ "20–24",
api_age >= 25 & api_age <=29 ~ "25–29",
api_age >= 30 & api_age <=34 ~ "30–34",
api_age >= 35 & api_age <=39 ~ "35–39",
api_age >= 40 & api_age <=44 ~ "40–44",
api_age >= 45 & api_age <=49 ~ "45–49",
api_age >= 50 & api_age <=54 ~ "50–54",
api_age >= 55 & api_age <=59 ~ "55–59",
api_age >= 60 & api_age <=64 ~ "60–64",
api_age >= 65 & api_age <=69 ~ "65–69",
api_age >= 70 & api_age <=74 ~ "70–74",
api_age >= 75 & api_age <=79 ~ "75–79",
api_age >= 80 & api_age <=84 ~ "80–84",
api_age >= 85 & api_age <=89~ "85–89",
# since BOP's age frequency distribution did not include people aged 95 and above, we assume that they are counted in the highest age category possible
api_age >= 90 ~ "90–94",
TRUE ~ "not-found"))
deathmaster_bop %>%
filter(api_age > 95)  %>%
output_table()
death_year_age = deathmaster_bop %>%
group_by(year, age_group) %>%
summarise(deaths = n())
agedist2 = left_join(agedist1, death_year_age, by = c("age_group", "year"))
agedist2[is.na(agedist2)] <- 0
# calculate death rate for each age group
agedist2 = agedist2 %>%
mutate(mortality_per_100k = (deaths / group_pop)*100000,
mortality_rate = deaths/group_pop)
agedist2 %>%
output_table()
df = agedist2 %>%
pivot_wider(id_cols = age_group, names_from = year, values_from = mortality_per_100k)
df %>%
output_table()
ref = agedist2 %>%
filter(year <2020)
std = ref %>%
group_by(age_group) %>%
summarise(deaths_sum = sum(deaths),
group_pop_sum = sum(group_pop)) %>%
ungroup() %>%
mutate(expected_death_rate = deaths_sum / group_pop_sum)
yr20 = agedist2 %>%
filter(year == 2020) %>%
select(age_group, group_pop, deaths, mortality_rate)
std1 = left_join(std, yr20, by = "age_group")
std1 = std1 %>%
mutate(expected_deaths = group_pop * expected_death_rate)
sum(na.omit(std1$deaths))/sum(na.omit(std1$expected_deaths))-1
yr21 = agedist2 %>%
filter(year == 2021) %>%
select(age_group, group_pop, deaths, mortality_rate)
std2 = left_join(std, yr21, by = "age_group")
std2 = std2 %>%
mutate(expected_deaths = group_pop * expected_death_rate)
sum(na.omit(std2$deaths))/sum(na.omit(std2$expected_deaths))-1
# examining age distribution of all years
years = c(2015:2021)
for(year in years){
plot = agedist2 %>%
filter(year == year) %>%
ggplot(aes(x = age_group, percent, fill= age_group))+
geom_bar(stat = "identity")+
ggtitle(paste0(year))
print(plot)
}
# calculating the age-specific death rates in the refernce population - 2015-2019
std = ref %>%
group_by(age_group) %>%
summarise(group_pop = sum(group_pop), average_pop = sum(average_pop), deaths = sum(deaths))
std = std %>%
mutate(death_rate = deaths / group_pop,
pop_pct = group_pop / average_pop,
weighted_rate = death_rate * pop_pct)
std %>%
output_table()
sum(std$weighted_weight)*100000
yr20_3 =  left_join(yr20, std, by = "age_group") %>%
mutate(weighted_rate = mortality_rate * pop_pct)
yr20_3 %>%
output_table()
sum(yr20_3$weighted_rate)*100000
# difference between 2020 and 2015-2019
sum(yr20_3$weighted_rate)/sum(std$weighted_rate)-1
yr21 = yr21 %>%
mutate(mortality_rate = deaths / group_pop)
yr21_3 = left_join(yr21, std, by = "age_group")
yr21_3  = yr21_3 %>%
mutate(weighted_rate = mortality_rate * pop_pct)
yr21_3 %>% output_table()
sum(yr21_3$weighted_rate)
# difference between 2021 and 2015-2019
sum(yr21_3$weighted_rate)/std(yr21_3$weighted_rate)-1
# difference between 2021 and 2015-2019
sum(yr21_3$weighted_rate)/sum(std$weighted_rate)-1
